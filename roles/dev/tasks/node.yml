---
- name: Install Node.js (macOS)
  community.general.homebrew:
    name: node
    state: present
  when: ansible_os_family == "Darwin"

- name: Install Node.js (Linux)
  ansible.builtin.package:
    name: 
      - nodejs
      - npm
    state: present
  become: true
  when: ansible_os_family != "Darwin"

- name: Install pnpm
  ansible.builtin.npm:
    name: pnpm
    global: true
    state: present
  become: "{{ ansible_os_family != 'Darwin' }}"

- name: Create pnpm home directory
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/Library/pnpm"
    state: directory
    mode: '0755'
  when: ansible_os_family == "Darwin"

- name: Create pnpm home directory (Linux)
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.local/share/pnpm"
    state: directory
    mode: '0755'
  when: ansible_os_family != "Darwin"

- name: Configure pnpm environment (macOS)
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.zprofile"
    line: "{{ item }}"
    create: true
  loop:
    - 'export PNPM_HOME="$HOME/Library/pnpm"'
    - 'case ":$PATH:" in *":$PNPM_HOME:"*) ;; *) export PATH="$PNPM_HOME:$PATH" ;; esac'
    - 'export NPM_CONFIG_PACKAGE_MANAGER="pnpm"'
  when: ansible_os_family == "Darwin"

- name: Configure pnpm environment (Linux)
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.zprofile"
    line: "{{ item }}"
    create: true
  loop:
    - 'export PNPM_HOME="$HOME/.local/share/pnpm"'
    - 'case ":$PATH:" in *":$PNPM_HOME:"*) ;; *) export PATH="$PNPM_HOME:$PATH" ;; esac'
    - 'export NPM_CONFIG_PACKAGE_MANAGER="pnpm"'
  when: ansible_os_family != "Darwin"

- name: Check if pnpm is already set up
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.local/share/pnpm/pnpm"
  register: pnpm_setup_check
  when: ansible_os_family != "Darwin"

- name: Check if pnpm is already set up (macOS)
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/Library/pnpm/pnpm"
  register: pnpm_setup_check_macos
  when: ansible_os_family == "Darwin"

- name: Setup pnpm global directory
  ansible.builtin.shell: |
    export PATH="$HOME/.local/share/pnpm:$HOME/Library/pnpm:$PATH"
    export PNPM_HOME="${HOME}/.local/share/pnpm"
    if [[ "{{ ansible_os_family }}" == "Darwin" ]]; then
      export PNPM_HOME="${HOME}/Library/pnpm"
    fi
    pnpm setup --force
  when: >
    (ansible_os_family != "Darwin" and not pnpm_setup_check.stat.exists) or
    (ansible_os_family == "Darwin" and not pnpm_setup_check_macos.stat.exists)
  ignore_errors: true

- name: Check if Node.js tools are installed
  ansible.builtin.shell: |
    export PATH="$HOME/.local/share/pnpm:$HOME/Library/pnpm:$PATH"
    export PNPM_HOME="${HOME}/.local/share/pnpm"
    if [[ "{{ ansible_os_family }}" == "Darwin" ]]; then
      export PNPM_HOME="${HOME}/Library/pnpm"
    fi
    pnpm list -g {{ item }} --depth=0 2>/dev/null || echo "NOT_INSTALLED"
  loop:
    - typescript
    - "@types/node"
    - eslint
    - prettier
    - vite
  register: node_tools_check
  changed_when: false
  failed_when: false

- name: Install common Node.js tools
  ansible.builtin.shell: |
    export PATH="$HOME/.local/share/pnpm:$HOME/Library/pnpm:$PATH"
    export PNPM_HOME="${HOME}/.local/share/pnpm"
    if [[ "{{ ansible_os_family }}" == "Darwin" ]]; then
      export PNPM_HOME="${HOME}/Library/pnpm"
    fi
    pnpm add -g {{ item.item }}
  loop: "{{ node_tools_check.results }}"
  when: "'NOT_INSTALLED' in item.stdout"
  retries: 2
  delay: 5
  ignore_errors: true

- name: Verify Node.js installation
  ansible.builtin.command: node --version
  register: node_version
  failed_when: node_version.rc != 0
  changed_when: false

- name: Verify pnpm installation
  ansible.builtin.command: pnpm --version
  register: pnpm_version
  failed_when: pnpm_version.rc != 0
  changed_when: false