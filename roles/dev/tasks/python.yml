---
# UV is the modern Python package manager - we'll use it exclusively

- name: Install Python via UV (macOS)
  community.general.homebrew:
    name: uv
    state: present
  when: ansible_os_family == "Darwin"

- name: Install UV (Linux)
  block:
    - name: Download and install UV in one step
      ansible.builtin.shell: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
      args:
        creates: "{{ ansible_env.HOME }}/.local/bin/uv"
      environment:
        UV_INSTALL_DIR: "{{ ansible_env.HOME }}/.local/bin"
      retries: 3
      delay: 5
      timeout: 120
    
    - name: Verify UV installation
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.local/bin/uv"
      register: uv_installed
    
    - name: Alternative UV installation via pip
      ansible.builtin.shell: |
        python3 -m pip install --user uv
      args:
        creates: "{{ ansible_env.HOME }}/.local/bin/uv"
      when: not uv_installed.stat.exists
      ignore_errors: true
      
    - name: Final verification of UV installation
      ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/uv --version"
      register: uv_test
      failed_when: uv_test.rc != 0
      changed_when: false
  when: ansible_os_family != "Darwin"

- name: Add UV to PATH
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.zprofile"
    line: 'export PATH="$HOME/.local/bin:$PATH"'
    create: true
    state: present

- name: Set UV binary path
  ansible.builtin.set_fact:
    uv_bin: "{{ '/opt/homebrew/bin/uv' if ansible_os_family == 'Darwin' else ansible_env.HOME + '/.local/bin/uv' }}"

- name: Check if UV is available
  ansible.builtin.command: "{{ uv_bin }} --version"
  register: uv_available
  failed_when: false
  changed_when: false

- name: Install Python versions with UV
  ansible.builtin.shell: |
    {{ uv_bin }} python install {{ item }}
  loop: "{{ development_setup.python_versions | default(['3.12']) }}"
  retries: 2
  delay: 5
  ignore_errors: true
  timeout: 300  # 5 minutes timeout
  when: uv_available.rc == 0

- name: Install common Python tools with UV
  ansible.builtin.shell: |
    {{ uv_bin }} tool install {{ item }}
  loop:
    - ruff
    - black
    - mypy
    - pytest
  retries: 2
  delay: 3
  ignore_errors: true
  timeout: 180  # 3 minutes timeout
  when: uv_available.rc == 0

- name: Warn if UV installation failed
  ansible.builtin.debug:
    msg: "UV installation failed. Python environment setup skipped. Install manually with: curl -LsSf https://astral.sh/uv/install.sh | sh"
  when: uv_available.rc != 0

- name: Set up UV shell completion
  ansible.builtin.shell: |
    {{ uv_bin }} generate-shell-completion zsh > {{ ansible_env.HOME }}/.config/uv_completion.zsh
  args:
    creates: "{{ ansible_env.HOME }}/.config/uv_completion.zsh"
  when: uv_available.rc == 0

- name: Add UV completion to shell environment
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.zprofile"
    line: '[ -f ~/.config/uv_completion.zsh ] && source ~/.config/uv_completion.zsh'
    create: true
    state: present
  when: uv_available.rc == 0

- name: Display UV version if successful
  ansible.builtin.debug:
    msg: "UV installed successfully: {{ uv_available.stdout }}"
  when: uv_available.rc == 0