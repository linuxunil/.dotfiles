# Global direnv configuration

# Logging level (debug, info, warn, error)
export DIRENV_LOG_FORMAT=""

# Load stdlib functions
source_env_if_exists() {
    local file="$1"
    if [[ -f "$file" ]]; then
        source_env "$file"
    fi
}

# Python virtual environment support for UV
layout_uv() {
    if [[ ! -f pyproject.toml && ! -f requirements.txt ]]; then
        log_error "No pyproject.toml or requirements.txt found. Run 'uv init' first."
        return 1
    fi
    
    # Create venv if it doesn't exist
    if [[ ! -d .venv ]]; then
        log_status "Creating Python virtual environment with UV..."
        uv venv
    fi
    
    # Activate the virtual environment
    source .venv/bin/activate
    
    # Install dependencies if needed
    if [[ pyproject.toml -nt .venv/pyvenv.cfg ]] || [[ requirements.txt -nt .venv/pyvenv.cfg ]]; then
        log_status "Installing dependencies..."
        uv sync 2>/dev/null || uv pip install -r requirements.txt 2>/dev/null
    fi
}

# Node.js support with automatic package manager detection
layout_node() {
    local node_version="$1"
    
    if [[ -f pnpm-lock.yaml ]]; then
        log_status "Using pnpm..."
        PATH_add node_modules/.bin
    elif [[ -f yarn.lock ]]; then
        log_status "Using yarn..."
        PATH_add node_modules/.bin
    elif [[ -f package.json ]]; then
        log_status "Using npm..."
        PATH_add node_modules/.bin
    fi
}

# Go module support
layout_go() {
    if [[ -f go.mod ]]; then
        export GOPATH="$PWD/.go"
        PATH_add "$GOPATH/bin"
        PATH_add bin
    fi
}

# Generic project environment loader
layout_project() {
    # Load .env file if it exists
    dotenv_if_exists .env
    dotenv_if_exists .env.local
    
    # Add local bin to PATH
    PATH_add bin
    PATH_add scripts
    
    # Add project-specific PATH additions
    if [[ -d .local/bin ]]; then
        PATH_add .local/bin
    fi
}